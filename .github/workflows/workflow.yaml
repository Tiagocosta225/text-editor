name: CI-CD

on:
  push:
    branches:
      - main

jobs:
  continuos-integration:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Using Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16.
      - name: run install, build and test
        run: |
          npm install
          npm run build 
          npm run test
          
      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0-${{ github.run_id }}
          release_name: Release v1.0.0-${{ github.run_id }}
          body: Automated release for CI/CD pipeline
          draft: false
          prerelease: false

      # Passo 7: Fazer upload do artefato para a release
      - name: Upload artifact to release
        uses: actions/upload-release-asset@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./build
          asset_name: app-build.zip
          asset_content_type: application/zip
   
          
  build-and-test:  # Job definido após a referência
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  deploy-to-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: test-environment
    steps:
      # Passo 8: Fazer deploy no ambiente de teste
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Test Environment
        run: echo "Deploying to test environment..."
        # Aqui você pode adicionar os comandos específicos para fazer o deploy
        # Exemplo: usar `scp`, `rsync`, ou uma ação específica de deploy (como para AWS, Heroku, etc.)

  notify-on-failure:
    if: failure()
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-to-test]
    steps:
      # Passo 9: Notificar o desenvolvedor por e-mail em caso de falha
      - name: Send failure email notification
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"to":"tiagocosta225@gmail.com", "subject":"CI/CD Pipeline Failed", "body":"Your CI/CD pipeline has failed. Please check the logs for more information."}' \
            https://api.sendgrid.com/v3/mail/send  # Substitua pelo serviço de e-mail de sua escolha

